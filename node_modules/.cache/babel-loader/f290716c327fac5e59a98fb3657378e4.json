{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nvar _templateObject;\n\nimport { css } from '@emotion/core';\nimport { sizes } from '../constants';\nexport var getSVGStyles = function getSVGStyles(_ref) {\n  var primaryColor = _ref.primaryColor,\n      secondaryColor = _ref.secondaryColor;\n  return css(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  pointer-events: none;\\n  color: \", \";\\n  fill: \", \";\\n\\n  /**\\n  * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n  * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n  * rule) and then override it with currentColor for the color changes to be picked up.\\n  */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"])), primaryColor || 'currentColor', secondaryColor);\n};\n/**\n * Returns the width of the icon's parent span. This function has\n * special behaviour to deal with icon-file-type specifically.\n *\n * The reality is the SVG still has its own dimensions, so this is\n * a secondary fallback which in 95% of cases is not required.\n * It's only really being kept to maintain backward compatability.\n */\n\nexport var getSizeStyles = function getSizeStyles(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      size = _ref2.size;\n\n  if (width && height) {\n    return \"height: \".concat(height, \"px; width: \").concat(width, \"px;\");\n  }\n\n  if (size) {\n    return \"height: \".concat(sizes[size], \"; width: \").concat(sizes[size], \";\");\n  }\n\n  return '';\n};","map":{"version":3,"sources":["E:/HOCTAP/reactJS/simple-todo-app/node_modules/@atlaskit/icon/dist/esm/components/styles.js"],"names":["_taggedTemplateLiteral","_templateObject","css","sizes","getSVGStyles","_ref","primaryColor","secondaryColor","getSizeStyles","_ref2","width","height","size","concat"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,8CAAnC;;AAEA,IAAIC,eAAJ;;AAEA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAO,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACpD,MAAIC,YAAY,GAAGD,IAAI,CAACC,YAAxB;AAAA,MACIC,cAAc,GAAGF,IAAI,CAACE,cAD1B;AAEA,SAAOL,GAAG,CAACD,eAAe,KAAKA,eAAe,GAAGD,sBAAsB,CAAC,CAAC,2DAAD,EAA8D,aAA9D,EAA6E,sVAA7E,CAAD,CAA7C,CAAhB,EAAseM,YAAY,IAAI,cAAtf,EAAsgBC,cAAtgB,CAAV;AACD,CAJM;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AACvD,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AAAA,MACIC,MAAM,GAAGF,KAAK,CAACE,MADnB;AAAA,MAEIC,IAAI,GAAGH,KAAK,CAACG,IAFjB;;AAIA,MAAIF,KAAK,IAAIC,MAAb,EAAqB;AACnB,WAAO,WAAWE,MAAX,CAAkBF,MAAlB,EAA0B,aAA1B,EAAyCE,MAAzC,CAAgDH,KAAhD,EAAuD,KAAvD,CAAP;AACD;;AAED,MAAIE,IAAJ,EAAU;AACR,WAAO,WAAWC,MAAX,CAAkBV,KAAK,CAACS,IAAD,CAAvB,EAA+B,WAA/B,EAA4CC,MAA5C,CAAmDV,KAAK,CAACS,IAAD,CAAxD,EAAgE,GAAhE,CAAP;AACD;;AAED,SAAO,EAAP;AACD,CAdM","sourcesContent":["import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nvar _templateObject;\n\nimport { css } from '@emotion/core';\nimport { sizes } from '../constants';\nexport var getSVGStyles = function getSVGStyles(_ref) {\n  var primaryColor = _ref.primaryColor,\n      secondaryColor = _ref.secondaryColor;\n  return css(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  pointer-events: none;\\n  color: \", \";\\n  fill: \", \";\\n\\n  /**\\n  * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\\n  * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\\n  * rule) and then override it with currentColor for the color changes to be picked up.\\n  */\\n  stop {\\n    stop-color: currentColor;\\n  }\\n\"])), primaryColor || 'currentColor', secondaryColor);\n};\n/**\n * Returns the width of the icon's parent span. This function has\n * special behaviour to deal with icon-file-type specifically.\n *\n * The reality is the SVG still has its own dimensions, so this is\n * a secondary fallback which in 95% of cases is not required.\n * It's only really being kept to maintain backward compatability.\n */\n\nexport var getSizeStyles = function getSizeStyles(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      size = _ref2.size;\n\n  if (width && height) {\n    return \"height: \".concat(height, \"px; width: \").concat(width, \"px;\");\n  }\n\n  if (size) {\n    return \"height: \".concat(sizes[size], \"; width: \").concat(sizes[size], \";\");\n  }\n\n  return '';\n};"]},"metadata":{},"sourceType":"module"}